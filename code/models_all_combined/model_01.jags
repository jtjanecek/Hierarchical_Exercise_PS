model {
	diffcoef[1] = -0.5
	diffcoef[2] =  0.5

	# Group 1 = Exercise
	# Group 2 = Resting

	# Pos = New
	# Neg = Old

	# Timepoint 1 parameters for each group
	for (g in 1:2) {
		alphaMu[g,1] ~ dnorm(1.1, 1/0.15^2)T(0.001,)
		tauMu[g,1] ~ dnorm(.5, 1/0.2^2)T(0.001,1.999)
		betaMu[g,1] ~ dnorm(.5, 1/0.2^2)T(0.001, 0.999)
		for (c in 1:4) {
			deltaMu[g,1,c] ~ dnorm(0, 1/0.2^2)	
		}
	}

	##### Define difference priors
	alphaDiffExercise ~ dnorm(0, 1/0.3^2)	
	alphaDiffExerciseCarryover ~ dnorm(0, 1/0.3^2)
	alphaDiffControl ~ dnorm(0, 1/0.3^2)

	betaDiffExercise ~ dnorm(0, 1/0.2^2)      
	betaDiffExerciseCarryover ~ dnorm(0, 1/0.2^2)      
	betaDiffControl ~ dnorm(0, 1/0.2^2)      

	tauDiffExercise  ~ dnorm(0, 1/0.2^2)
	tauDiffExerciseCarryover  ~ dnorm(0, 1/0.2^2)
	tauDiffControl  ~ dnorm(0, 1/0.2^2)

	for (c in 1:4) {
		deltaDiffExercise[c] ~ dnorm(0, 1/0.5^2)	
		deltaDiffExerciseCarryover[c] ~ dnorm(0, 1/0.5^2)	
		deltaDiffControl[c] ~ dnorm(0, 1/0.5^2)	
	}

	############## Group 1 is exercise, so model as follows:
	# timepoint2 = timepoint1 + exercise
	# timepoint3 = timepoint2 + carryoverEffect
	#### Group 1, timepoint 2:
	alphaMu[1,2] = alphaMu[1,1] + alphaDiffExercise	
	betaMu[1,2] = betaMu[1,1] + betaDiffExercise
	tauMu[1,2] = tauMu[1,1] + tauDiffExercise
	for (c in 1:4) {
		deltaMu[1,2,c] = deltaMu[1,1,c] + deltaDiffExercise[c]
	}
	#### Group 1, timepoint 3:
	alphaMu[1,3] = alphaMu[1,2] + alphaDiffExerciseCarryover	
	betaMu[1,3] = betaMu[1,2] + betaDiffExerciseCarryover
	tauMu[1,3] = tauMu[1,2] + tauDiffExerciseCarryover
	for (c in 1:4) {
		deltaMu[1,3,c] = deltaMu[1,2,c] + deltaDiffExerciseCarryover[c]
	}

	############## Group 2 is control, so model as follows:
	# timepoint2 = timepoint1 + control
	# timepoint3 = timepoint2 + exercise
	#### Group 2, timepoint 2:
	alphaMu[2,2] = alphaMu[2,1] + alphaDiffControl
	betaMu[2,2] = betaMu[2,1] + betaDiffControl
	tauMu[2,2] = tauMu[2,1] + tauDiffControl
	for (c in 1:4) {
		deltaMu[2,2,c] = deltaMu[2,1,c] + deltaDiffControl[c]
	}
	#### Group 2, timepoint 3:
	alphaMu[2,3] = alphaMu[2,2] + alphaDiffExercise
	betaMu[2,3] = betaMu[2,2] + betaDiffExercise
	tauMu[2,3] = tauMu[2,2] + tauDiffExercise
	for (c in 1:4) {
		deltaMu[2,3,c] = deltaMu[2,2,c] + deltaDiffExercise[c]
	}


	for (g in 1:2) {
		for (p in 1:3) {
			for (c in 1:4) {
				delta[g,p,c,1] = deltaMu[g,p,c]
				delta[g,p,c,2] = 0
			}
		}
	}

	###### Group SDs
	for (g in 1:2) {
		for (p in 1:3) { # Pre/Post timepoints
			alphasd[g,p] ~ dexp(.5)
			betasd[g,p] ~ dexp(.5)
			tausd[g,p] ~ dexp(.5)
			for (c in 1:4) {
				deltasd[g,p,c] ~ dexp(.5)
			}
		}
	}

	###### Subject level parameters
	for (p in 1:3) {
		for (s in 1:nSubjects) {
			alphaSubj[p,s] ~ dnorm(alphaMu[groupList[s],p], 1/alphasd[groupList[s],p]^2)T(0.001,)
		}
	}


	####### Update with data
	for (p in 1:3) {
		for (s in 1:nSubjects) {
			# trials in order, not separated by condition
			for (tr in 1:nAllTrials) {
				# using answer from that trial, adjust weiner variables

				y[p,s,tr] ~ dwiener(alphaSubj[p,s], tauMu[groupList[s],p], betaMu[groupList[s],p],delta[groupList[s],p, condList[p,s,tr], z[p,s,tr]+1])
				# ypred is prediction of whether trial will be correct based on weiner model
				ypred[p,s,tr] ~ dwiener(alphaSubj[p,s], tauMu[groupList[s],p], betaMu[groupList[s],p],delta[groupList[s],p, condList[p,s,tr], z[p,s,tr]+1])

				z[p,s,tr] ~ dbern(phi[p,s]) # guessing or not
			}

			phi[p,s] ~ dunif(0,1) # random proportion fed into guessing variable, updated based on their trial responses, fed into z

		}

	}

}

