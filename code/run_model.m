
clear;
close all;
addpath("/tmp/yassamri2/MDTO-Diffusion/young_vs_old/trinity-master")
trinity install

proj_id = 'model_07_C1'
model = strcat('models/',proj_id,'.jags');
fid = fopen(strcat('models/', proj_id, '.params'),'r');
monitorParameters = textscan(fid,'%s','delimiter','\n'); 
monitorParameters = transpose(monitorParameters{1})
fclose(fid);

load("../data/processed_data/P1_diffusion_trials.mat");
rtP1 = rt;
subjListP1 = subjList;
condListP1 = subList;
load("../data/processed_data/P2_diffusion_trials.mat");
rtP2 = rt;
subjListP2 = subjList;
condListP2 = subList;
load("../data/processed_data/P3_diffusion_trials.mat");
rtP3 = rt;
subjListP3 = subjList;
condListP3 = subList;

% Get subjects and groups 
group_list = [];
subj_group_list = csvread("../data/subj_list.csv", 1,0);
for subj = subjList
    group1 = find(ismember(subj_group_list, [subj,1], 'rows'));
    group2 = find(ismember(subj_group_list, [subj,2], 'rows'));
    if not(isempty(group1))
        group_list = [group_list 1];
    elseif not(isempty(group2))
        group_list = [group_list 2];
    else
        disp("No group found for a subject!")
        disp(subj)
        return
    end
end

% Combine them into 1 matrix
y = cat(3, rtP1, rtP2, rtP3);
y = permute(y, [3,1,2]);
condList = cat(3, condListP1, condListP2, condListP3);
condList = permute(condList, [3,1,2]);

% Cut out all RTs that are < .5
y(abs(y)<.5) = nan;
minRT = .5

y(abs(y)>1.95) = nan;

data = struct(...
    'nSubjects'       ,   size(subjList,2)      , ...
    'nAllTrials'      ,   160          , ...
    'y'               ,   y               , ...
    'condList'         ,   condList          , ...
    'groupList'       ,   group_list );

%% Working generator
% generator = @()struct(...
%     'z'     , ceil(rand(2, size(subjList,2), 160, 1)) , ...
%     'phi'   , rand(2, size(subjList,2), 1) , ...
%     'alphagroupmudiff', 0, ...
%     'alphagroupmumid', 0, ... 
%     'alphamumid', [1.2, 1.2], ... 
%     'alphasd', [.001, .001; .001, .001], ...
%     'alpha', [1.2, 1.2; 1.2, 1.2], ...
%     'alphasubj', rand([2, size(subjList,2)])*0 + 1.2, ....
%     'taugroupmudiff',0, ...
%     'taugroupmumid', 0, ... 
%     'taumumid', [.4, .4], ...
%     'tausd', [.01, .01; .01, .01], ...
%     'tau', [.4, .4; .4, .4], ...
%     'betagroupmudiff', 0, ...
%     'betagroupmumid', 0, ...
%     'betamumid', [.5, .5], ...
%     'betasd', [.01, .01; .01, .01], ...
%     'beta', [.5, .5; .5, .5]); 

generator = @()struct(...
    'z'     , ceil(rand(2, size(subjList,2), 160, 1)) , ...
    'phi'   , rand(2, size(subjList,2), 1)); % was:  rand(nGroups, 1), ...

disp('Running!')
tic
  [stats, chains, diagnostics, info] = callbayes('jags', ...
    'model'          ,     model , ...
    'data'           ,      data , ...
    'outputname'     , 'samples' , ...
    'init'           , generator , ...
    'nchains'        ,  6  , ...
    'nburnin'        ,  20000  , ...
    'nsamples'       , 100000  , ...
    'monitorparams'  ,    monitorParameters , ...
    'thin'           ,    1 , ...
    'workingdir'     ,   ['../storage/' proj_id] , ...
    'verbosity'      ,        0  , ...
    'saveoutput'     ,     false  , ...
    'parallel'       ,1 , ...
    'modules'        ,  {'dic', 'wiener'}  );

% Print and save
fprintf('%s took %f seconds!\n', upper('jags'), toc)
disp('Saving...')
save(strcat('../storage/',proj_id,'.mat'), 'stats', 'chains', 'diagnostics', 'info', 'data', '-v7.3');
disp('Saved!')


%% Inspect the results
% First, inspect the convergence of each parameter
disp('Convergence statistics:')
grtable(chains, 1.05)
return;
%%
