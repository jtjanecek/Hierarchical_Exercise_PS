model {
	diffcoef[1] = -0.5
	diffcoef[2] =  0.5

	# Group 1 = Exercise
	# Group 2 = Resting

	# Pos = New
	# Neg = Old


	for (g in 1:2) {
		alphaMid[g] ~ dnorm(1.1, 1/0.15^2)T(0.001,)
		tauMid[g] ~ dnorm(.5, 1/0.2^2)T(0.001,1.999)
		betaMid[g] ~ dnorm(.5, 1/0.2^2)T(0.001, 0.999)
		for (c in 1:4) {
			deltaMid[g,c] ~ dnorm(0, 1/0.2^2)	
		}
	}

	##### Define difference priors
	alphaDiffExercise ~ dnorm(0, 1/0.3^2)	
	alphaDiffControl ~ dnorm(0, 1/0.3^2)

	betaDiffExercise ~ dnorm(0, 1/0.2^2)      
	betaDiffControl ~ dnorm(0, 1/0.2^2)      

	tauDiffExercise  ~ dnorm(0, 1/0.2^2)
	tauDiffControl  ~ dnorm(0, 1/0.2^2)

	for (c in 1:4) {
		deltaDiffExercise[c] ~ dnorm(0, 1/0.5^2)	
		deltaDiffControl[c] ~ dnorm(0, 1/0.5^2)	
	}

	## GROUP 1 parameters
	for (p in 1:2) {
		alphaMu[1,p] = alphaMid[1] + diffcoef[p]*alphaDiffExercise
		tauMu[1,p] = tauMid[1] + diffcoef[p]*tauDiffExercise
		betaMu[1,p] = betaMid[1] + diffcoef[p]*betaDiffExercise
		for (c in 1:4) {
			deltaMu[1,p,c] = deltaMid[1,c] + diffcoef[p]*deltaDiffExercise[c]
		}
	}

	## GROUP 2 parameters
	for (p in 1:2) {
		alphaMu[2,p] = alphaMid[2] + diffcoef[p]*alphaDiffControl
		tauMu[2,p] = tauMid[2] + diffcoef[p]*tauDiffControl
		betaMu[2,p] = betaMid[2] + diffcoef[p]*betaDiffControl
		for (c in 1:4) {
			deltaMu[2,p,c] = deltaMid[2,c] + diffcoef[p]*deltaDiffControl[c]
		}
	}

	###### Group SDs
	for (g in 1:2) {
		for (p in 1:3) { # Pre/Post timepoints
			alphasd[g,p] ~ dexp(.5)
			betasd[g,p] ~ dexp(.5)
			tausd[g,p] ~ dexp(.5)
			for (c in 1:4) {
				deltasd[g,p,c] ~ dexp(.5)
			}
		}
	}

	###### Subject level parameters
	for (p in 1:2) {
		for (s in 1:nSubjects) {
			alphaSubj[p,s] ~ dnorm(alphaMu[groupList[s],p], 1/alphasd[groupList[s],p]^2)T(0.001,)
			betaSubj[p,s] ~ dnorm(betaMu[groupList[s],p], 1/betasd[groupList[s],p]^2)T(0.001,0.999)
			tauSubj[p,s] ~ dnorm(tauMu[groupList[s],p], 1/tausd[groupList[s],p]^2)T(0.001, 1.999)
			for (c in 1:4) {
				deltaSubj[p,s,c] ~ dnorm(deltaMu[groupList[s],p,c], 1/deltasd[groupList[s],p,c]^2)		
			}
		}
	}

	###### Trial level parameters
	for (p in 1:2) {
		for (s in 1:nSubjects) {
			betaSubjSD[p,s] ~ dexp(.5)
			tauSubjSD[p,s] ~ dexp(.5)
			for (c in 1:4) {
				deltaSubjSD[p,s,c] ~ dexp(.5)
			}

			for (tr in 1:nAllTrials) {
				betaSubjTrial[p,s,tr] ~ dnorm(betaSubj[p,s], 1/betaSubjSD[p,s]^2)T(0.001, 0.999)
				tauSubjTrial[p,s,tr] ~ dnorm(tauSubj[p,s], 1/tauSubjSD[p,s]^2)T(0.001, 1.999)
				deltaSubjTrial[p,s,tr,1] ~ dnorm(deltaSubj[p,s,condList[p,s,tr]], 1/deltaSubjSD[p,s,condList[p,s,tr]]^2)T(0.001, 1.999)
				deltaSubjTrial[p,s,tr,2] = 0
			}
		}
	}


	####### Update with data
	for (p in 1:2) {
		for (s in 1:nSubjects) {
			# trials in order, not separated by condition
			for (tr in 1:nAllTrials) {
				# using answer from that trial, adjust weiner variables

				y[p,s,tr] ~ dwiener(alphaSubj[p,s], tauSubjTrial[p,s,tr], betaSubjTrial[p,s,tr],deltaSubjTrial[p,s,tr, z[p,s,tr]+1])
				# ypred is prediction of whether trial will be correct based on weiner model
				ypred[p,s,tr] ~ dwiener(alphaSubj[p,s], tauSubjTrial[p,s,tr], betaSubjTrial[p,s,tr],deltaSubjTrial[p,s,tr, z[p,s,tr]+1])

				z[p,s,tr] ~ dbern(phi[p,s]) # guessing or not
			}

			phi[p,s] ~ dunif(0,1) # random proportion fed into guessing variable, updated based on their trial responses, fed into z

		}

	}

}

